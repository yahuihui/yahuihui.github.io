{"meta":{"title":"沒事不要看會瞎的","subtitle":null,"description":null,"author":"John Doe","url":"https://www.yahuihu.info"},"pages":[],"posts":[{"title":"comparison","slug":"Cloud_comparison","date":"2018-06-29T03:34:36.000Z","updated":"2018-06-29T04:14:33.788Z","comments":true,"path":"2018/06/29/Cloud_comparison/","link":"","permalink":"https://www.yahuihu.info/2018/06/29/Cloud_comparison/","excerpt":"","text":"雲端各功能比較Google Compute Engine Google AppEngine Google Cloud Datastore Google CloudStorage Google CloudSQL Google BigQuery 資料來源：https://docs.google.com/presentation/d/","categories":[],"tags":[]},{"title":"GCP基礎課程","slug":"GCP基礎課程","date":"2018-06-29T03:02:39.000Z","updated":"2018-06-29T06:45:52.157Z","comments":true,"path":"2018/06/29/GCP基礎課程/","link":"","permalink":"https://www.yahuihu.info/2018/06/29/GCP基礎課程/","excerpt":"","text":"GCP 介紹google所提供的雲端服務 (ex：computer engine、app engine、cloud storeage…etc) -Compute：以計算為主的服務，包含Compute Engine, App Engine等服務；我們多使用Compute Engine建執行個體; 近期Google更推出Container Service，稱作Google Container Engine(GKE)，來服務使用Docker的用戶。 -Big Data：大資料儲存方案，包含BigQuery, Dataflow等等處理大資料的相關方案。 -Storage：儲存相關服務，包含SQL - CloudSQL, NoSQL - Datastore, File - Cloud Storage等儲存相關服務。 -APIs：包含所有Google服務的可操作程式介面，讓需要的使用者以PaaS的方式與Google介接，使用Google之服務。 -Networking：網路相關的服務，包含VPN與DNS服務，以Google管理的方式，提供網路層需要使用到的一些應用。 IAM (Identity and Access Management)IAM 主要概念可以用這句話描述 ”誰，想要怎麼使用，哪些資源”","categories":[],"tags":[]},{"title":"harbor","slug":"harbor","date":"2018-04-03T09:34:00.000Z","updated":"2018-06-29T02:51:52.687Z","comments":true,"path":"2018/04/03/harbor/","link":"","permalink":"https://www.yahuihu.info/2018/04/03/harbor/","excerpt":"","text":"什麼是 Harbor？？Harbor是VMware公司開源的企業級DockerRegistry項目Harbor是一個用於存儲和分發的Docker鏡像的企業級Registry服務器Harbor提供更好的性能和安全性。使註冊表更接近構建和運行環境可提高圖像傳輸效率。Harbor與現有的企業LDAP / AD集成，用於用戶驗證和管理。 Harbor建置教學環境準備Ubuntu 16.04 LTSPython 2.7 ↑Docker 1.10 ↑Docker-compose 1.6.0 ↑Docker Compose依靠Docker Engine進行任何有意義的工作。ex：Compose使用Docker標籤來追踪容器 環境安裝作業確認VM版本 Check Version執行apt-get update 和apt-get upgrade安裝python與驗證python版本安裝docker驗證docker版本安裝Docker Compose編輯compose權限 與 驗證Docker Composeopenssl.cnf內的[v3_ca]加入倉庫IP 安裝Harbor下載版本v1.1.1wget https://github.com/vmware/harbor/releases/download/v1.1.1/harbor-online-installer-v1.1.1.tgz解壓縮檔案 修改Modify harbor.cfg &lt; hostname = reg.mydomain.com-&gt; hostname = harbor.___.xsg &lt; ui_url_protocol = http-&gt; ui_url_protocol = https &lt; ssl_cert = /data/cert/server.crt-&gt; ssl_cert = /data/cert/___.xsg.crt &lt; ssl_cert_key = /data/cert/server.key-&gt; ssl_cert_key = /data/cert/___.xsg.key harbor安裝sudo ./install.sh 在harbor倉庫下檢查容器sudo docker-compose top 新增DNS https://harbor.atcity.xsg/帳號：admin密碼：Harbor12345 安裝 Certificate在harbor下產生cert資料夾，可利用windows產生憑證後，改製作成.crt(CERTIFICATE) 和.key (PRIVATE KEY) 檔案將憑證移到/data/cert/，以免後續改用LDAP需重啟服務清掉data，憑證會被刪掉mkdir -p /data/cert/mv /date/cert/atcity.xsg.crt /data/cert/mv /date/cert/atcity.xsg.key /data/cert/ LADP設定修改設定檔vim haobor.cfg &lt; auth_mode = db_auth-&gt; auth_mode = ldap_auth &lt; ldap_url = ldaps://ldap.mydomain.com-&gt; ldap_url = ldap://t0ldap.gosmio.biz:3268 &lt; #ldap_searchdn = uid=searchuser,ou=people,dc=mydomain,dc=com-&gt; ldap_searchdn = CN=ittestuser,OU=PublicID,OU=Account,DC=gosmio,DC=biz &lt; #ldap_search_pwd = password-&gt; ldap_search_pwd = a123456A &lt; ldap_basedn = ou=people,dc=mydomain,dc=com-&gt; ldap_basedn = dc=gosmio,dc=biz &lt; ldap_uid = uid-&gt; ldap_uid = sAMAccountName 重啟服務並強制清除data目錄下資料 docker-compose down -v rm -rf /data ./prepare docker-compose up -d 測試網頁登入https://harbor.atcity.xsg/ admin / Harbor12345 調整Configuration設定 測試網頁登入","categories":[],"tags":[]},{"title":"filebeat","slug":"ELK_filebeat","date":"2018-03-28T09:14:34.000Z","updated":"2018-04-24T09:14:16.548Z","comments":true,"path":"2018/03/28/ELK_filebeat/","link":"","permalink":"https://www.yahuihu.info/2018/03/28/ELK_filebeat/","excerpt":"","text":"ELK 簡介ELK 是 Elasticsearch、Logstash 和 Kibana 三種軟體產品的首字母縮寫，這三者都是開源軟體。 Elasticsearch︰分散式搜索和分析引擎。具有高可伸縮、高可靠和易管理等特點。能對大容量的資料進行接近實時的存儲、搜索和分析操作。 Logstash︰資料收集引擎。從各種資料源搜集資料，並對資料進行過濾、分析、豐富、統一格式等操作，然後存儲到用戶指定的位置。 Kibana︰資料分析和可視化平台。通常與 Elasticsearch 配合使用，對其中資料進行搜索、分析和以統計圖表的方式展示。 Filebeat︰ELK 協議棧的新成員，一個輕量級開源日志檔案資料搜集器，基于 Logstash-Forwarder 源代碼開發。在需要采集日志資料的 server 上安裝 Filebeat，並指定日志目錄或日志檔案後，Filebeat 就能讀取資料，迅速傳送到 Logstash 進行解析，亦或直接傳送到Elasticsearch 進行集中式存儲和分析。 最簡單架構只有一個 Logstash、Elasticsearch 和 Kibana 。Logstash 通過輸入外掛程式從多種資料源（比如日志檔案、標準輸入 Stdin 等）獲取資料，再經過濾外掛程式加工資料，然後經 Elasticsearch 輸出外掛程式輸出到 Elasticsearch，通過 Kibana 展示。 把一個 Logstash 資料搜集節點擴展到多個，分布于多台機器，將解析好的資料傳送到 Elasticsearch server 進行存儲，最後在 Kibana 查詢、生成日志報表等。 原文網址：https://ifun01.com/BHBLFYZ.html 這種結構因為需要在各個伺服器上部署 Logstash，而它比較消耗 CPU 和內存資源，所以比較適合計算資源豐富的伺服器，否則容易造成伺服器性能下降，甚至可能導致無法正常工作。 原文網址：https://ifun01.com/BHBLFYZ.html filebeat 架構filebeat.yml中需設定日誌檔案的路徑，每個日誌檔案(LOG)，Filebeat啟動harvester(收割機)。每個harvester讀取新的內容一個日誌檔案，新的日誌資料傳送到spooler（後台處理程式），它匯集的事件和聚合資料傳送到你已經配置了Filebeat輸出。 原文網址 1.https://ifun01.com/BHBLFYZ.html 2.https://ifun01.com/8JODF4K.html","categories":[],"tags":[]},{"title":"Kubernetes","slug":"Kubernetes","date":"2018-03-27T09:02:07.000Z","updated":"2018-06-12T02:50:26.743Z","comments":true,"path":"2018/03/27/Kubernetes/","link":"","permalink":"https://www.yahuihu.info/2018/03/27/Kubernetes/","excerpt":"","text":"什麼是 KubernetesKubernetes(通常稱為K8s)是 Google 團隊開發的開源項目，它的目標是管理跨多個主机的容器平台，它建置在docker技術之上，用於自動部署、隨時擴展或收縮容器和管理容器化（containerized）應用程式的開源系統。簡言之，以更高效的方式自動化跨群集的應用程序容器的分發和調度。 主服務器(master)管理集群，節點(nodes)用於管理正在運行的應用程序。 在 kubernetes 的設定中，最基本的管理单位是pod。pod是一個或多個容器的組合，容器才是真正的執行個體。Pod中的每個容器都共享網路，包括IP地址和網路端口 K8S屬分布式系統，主要元件有：一、Master – 主服務器(master)管理集群。包含以下元件： 1.API Server：是整個系统的對外接口，提供給外部使用者和內部元件呼叫。 2.scheduler：負責各種排程作業、對資源進行調度，分配某個pod 到某個節點node上。 3.controller：負責執行各種控制。二、Node – 執行k8s的實體或虛擬的主機，並運行了許多容器。包含以下元件： 1.kubelet：負責Kubernetes Master和Node之間的通信的過程; 它管理機器上運行的Pod和容器。 2.kubernetes proxy：Proxy是為了解決外部網絡能夠訪問跨機器集群中容器提供的應用服務。 3.docker：管理pod、檢查容器是否正常運行、監控所有節點的資源使用狀況，是Pod中使用的最常見的容器運行 K8S 架構 這些節點使用主機公開的Kubernetes API與主機進行通信。 Kubernetes中所有的配置都是通过API对象的spec去设置的kubernates是使用etcd做為系統的設定儲存中心、重要資料都是持久化在etcd中的。kubectl是和Kubernetes API交互的命令行程序kubectl是用於針對Kubernetes群集運行命令的命令行界面, 類似docker run的功能 *RPC(Remote Procedure Call)遠端程序呼叫是一個電腦通訊協定。該協定允許執行於一台電腦的程式呼叫另一台電腦的子程式GRPC 是Google提供的一套RPC函式庫，需要Go version 1.5 以上的版本才支援。 protobuf (Protocol Buffers) 是由 Google 所推出的一格式，可以把它想像成是 XML 或 JSON 格式，但是更小、更快，而且更簡潔。這能夠幫你節省網路與硬體資源，且只需要定義一次資料結構，接著就會自動生成符合你程式語言的檔案，讓你能夠直接在你的程式上使用。 Kubernetes集群内部存在三個IP，分别是：Node IP：主機的IP地址Pod IP：使用网络插件创建的IP（如flannel），使跨主机的Pod可以互通Cluster IP：虚拟IP，通过iptables规则访问服务 K8S建置教學 (以三台環境建置為例)環境需3台。一台當master，二台當node 「master、node」登入後切換至最高權限 sudo su1234apt-get update apt-get upgrade -yapt-get dist-upgrade -ydocker：apt-get install –y docker.io kubeadm 管理k8s套件，依照文件照操作，如下圖1234567891011apt-get update &amp;&amp; apt-get install -y apt-transport-https curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list deb http://apt.kubernetes.io/ kubernetes-xenial main EOF apt-get update apt-get install -y kubelet kubeadm kubectl 「master、node」關閉SWAP，這是由於目前尚不支援 swap 分區，執行下列指令將 swap 關閉即可, SWAP開著會無法安裝K8S1swapoff –a 安裝完kubeadm之後進行初始化和架設網路，網路是使用fiannl來建置。「master」 kubeadm初始化文件 1kubeadm init - -pod-network-cidr=10.244.0.0/16 「master」kubeadm架設網路1sysctl net.bridge.bridge-nf-call-iptables=1 「master」建置資料夾、COYP檔案、修改權限123mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config 執行完後會出現join node，綠框的金鑰複製下來。 「node」 join node，貼上金鑰讓node加入到master，即完成cluster 「master」真正分配網路1kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml 「master」檢查 DNS 狀態狀態1kubectl get pods – -namespace kube-system 剛開始 dns 還是 pending 狀態，等過一段時間後就會是 running 狀態以上k8s建置完畢 測試cluster，以nginx為例建置nginx pods狀態，nginx的狀態要在running1kubectl run nginx - -image=nginx - -replicas=2 - -port=80 查詢pods1kubectl get pods 開始部署1kubectl get deploy 開服務使用的port1kubectl expose deploy nginx - -type=NodePort 查詢服務狀態1kubectl get service 網頁測試 VM的IP+NodePort 如需重建，整組刪掉後包含master和node，再進行kubectl init注意: 此指令會移除所有 Kubernetes 相關服務及資料 参考文獻https://kubernetes.io/docs/setup/independent/install-kubeadm/https://jimmysong.io/kubernetes-handbook/concepts/concepts.htmlhttp://cizixs.com/2016/10/25/kubernetes-intro-kubelet https://jimmysong.io/kubernetes-handbook https://kubernetes.io/docs/tutorials/kubernetes-basics/explore-intro/ https://yeasy.gitbooks.io/docker_practice/content/kubernetes/concepts.html","categories":[],"tags":[{"name":"Kubernetes、K8S","slug":"Kubernetes、K8S","permalink":"https://www.yahuihu.info/tags/Kubernetes、K8S/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-03-19T18:01:16.926Z","updated":"2018-03-28T09:51:21.409Z","comments":true,"path":"2018/03/20/hello-world/","link":"","permalink":"https://www.yahuihu.info/2018/03/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}